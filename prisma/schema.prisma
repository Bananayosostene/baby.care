generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  active
  inactive
}

enum BabyState {
  crying
  laughing
  calm
}

enum DeviceType {
  sensor
  speaker
  camera
}

enum DeviceStatus {
  active
  inactive
  maintenance
}

enum AudioType {
  lullaby
  white_noise
  parent_voice
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String
  phone     String?
  location  String?
  role      String   @default("family")
  status    UserStatus @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  baby      Baby? 
  sentInvites Invitations[]
}

model Invitations {
  id        String   @id @default(uuid())
  email     String   @unique
  role      String
  token     String   @unique 
  isUsed    Boolean  @default(false)
  createdAt DateTime 
  inviterId  String
  inviter   User     @relation(fields: [inviterId], references: [id])
  @@index([inviterId])
}

model Baby {
  id        String   @id @default(uuid())
  name      String
  birthDate DateTime
  age       Int
  parentId  String   @unique
  parent    User     @relation(fields: [parentId], references: [id])
  state     BabyState @default(calm)
  devices   Device[]
  selectedAudioId String? 
  selectedAudio   Music?  @relation(fields: [selectedAudioId], references: [id])
  createdAt DateTime @default(now())
  SensorData SensorData[]

  @@index([parentId])
}

model Music {
  id        String   @id @default(uuid())
  name      String
  type      AudioType  
  url       String   
  duration  Int 
  priority  Int       @unique  @default(1)   
  isPlaying  Boolean  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Baby Baby[]

  @@index([type])
}

model Device {
  id        String   @id @default(uuid())
  name      String
  type      DeviceType
  babyId    String
  baby      Baby     @relation(fields: [babyId], references: [id])
  status    DeviceStatus   @default(active)
  serialNumber  String      @unique
  lastPing      DateTime    @default(now())
  createdAt DateTime @default(now())
  updatedAt     DateTime    @updatedAt
  SensorData SensorData[]

  @@index([babyId])
  @@index([type, status])
}

model SensorData {
  id        String   @id @default(uuid())
  deviceId  String
  babyId    String
  status    BabyState
  timestamp DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id])
  baby      Baby     @relation(fields: [babyId], references: [id])

    @@index([babyId, timestamp]) 
  @@index([deviceId, timestamp])
}

